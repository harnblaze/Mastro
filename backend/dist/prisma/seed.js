"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const bcrypt = require("bcrypt");
const prisma = new client_1.PrismaClient();
async function main() {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const passwordHash = await bcrypt.hash('password', 10);
    const user = await prisma.user.upsert({
        where: { email: 'test@example.com' },
        update: {},
        create: {
            email: 'test@example.com',
            passwordHash: passwordHash,
            role: 'OWNER',
        },
    });
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user.email);
    const business = await prisma.business.upsert({
        where: { id: 'test-business-1' },
        update: {},
        create: {
            id: 'test-business-1',
            ownerId: user.id,
            name: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã "–≠–ª–µ–≥–∞–Ω—Ç"',
            address: '—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15, –ú–æ—Å–∫–≤–∞',
            timezone: 'Europe/Moscow',
            phone: '+7 (495) 123-45-67',
            email: 'info@elegant-salon.ru',
            description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∫—Ä–∞—Å–æ—Ç—ã –∏ —É—Ö–æ–¥–∞',
            workingHours: {
                monday: { isWorking: true, start: '09:00', end: '21:00' },
                tuesday: { isWorking: true, start: '09:00', end: '21:00' },
                wednesday: { isWorking: true, start: '09:00', end: '21:00' },
                thursday: { isWorking: true, start: '09:00', end: '21:00' },
                friday: { isWorking: true, start: '09:00', end: '21:00' },
                saturday: { isWorking: true, start: '10:00', end: '20:00' },
                sunday: { isWorking: false, start: '10:00', end: '18:00' },
            },
        },
    });
    console.log('‚úÖ –ë–∏–∑–Ω–µ—Å —Å–æ–∑–¥–∞–Ω:', business.name);
    const services = await Promise.all([
        prisma.service.upsert({
            where: { id: 'service-manicure' },
            update: {},
            create: {
                id: 'service-manicure',
                businessId: business.id,
                title: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
                durationMinutes: 60,
                price: 200000,
                bufferBefore: 10,
                bufferAfter: 10,
                color: '#FF6B9D',
            },
        }),
        prisma.service.upsert({
            where: { id: 'service-pedicure' },
            update: {},
            create: {
                id: 'service-pedicure',
                businessId: business.id,
                title: '–ü–µ–¥–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
                durationMinutes: 90,
                price: 300000,
                bufferBefore: 10,
                bufferAfter: 10,
                color: '#4ECDC4',
            },
        }),
        prisma.service.upsert({
            where: { id: 'service-haircut' },
            update: {},
            create: {
                id: 'service-haircut',
                businessId: business.id,
                title: '–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è',
                durationMinutes: 45,
                price: 250000,
                bufferBefore: 5,
                bufferAfter: 5,
                color: '#45B7D1',
            },
        }),
        prisma.service.upsert({
            where: { id: 'service-coloring' },
            update: {},
            create: {
                id: 'service-coloring',
                businessId: business.id,
                title: '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å',
                durationMinutes: 120,
                price: 500000,
                bufferBefore: 15,
                bufferAfter: 15,
                color: '#96CEB4',
            },
        }),
    ]);
    console.log('‚úÖ –£—Å–ª—É–≥–∏ —Å–æ–∑–¥–∞–Ω—ã:', services.length);
    const staff = await Promise.all([
        prisma.staff.upsert({
            where: { id: 'staff-anna' },
            update: {},
            create: {
                id: 'staff-anna',
                businessId: business.id,
                name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
                phone: '+7 (495) 111-11-11',
            },
        }),
        prisma.staff.upsert({
            where: { id: 'staff-maria' },
            update: {},
            create: {
                id: 'staff-maria',
                businessId: business.id,
                name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
                phone: '+7 (495) 222-22-22',
            },
        }),
    ]);
    console.log('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', staff.length);
    await Promise.all([
        prisma.staffService.upsert({
            where: {
                staffId_serviceId: { staffId: staff[0].id, serviceId: services[0].id },
            },
            update: {},
            create: {
                staffId: staff[0].id,
                serviceId: services[0].id,
            },
        }),
        prisma.staffService.upsert({
            where: {
                staffId_serviceId: { staffId: staff[0].id, serviceId: services[1].id },
            },
            update: {},
            create: {
                staffId: staff[0].id,
                serviceId: services[1].id,
            },
        }),
        prisma.staffService.upsert({
            where: {
                staffId_serviceId: { staffId: staff[1].id, serviceId: services[2].id },
            },
            update: {},
            create: {
                staffId: staff[1].id,
                serviceId: services[2].id,
            },
        }),
        prisma.staffService.upsert({
            where: {
                staffId_serviceId: { staffId: staff[1].id, serviceId: services[3].id },
            },
            update: {},
            create: {
                staffId: staff[1].id,
                serviceId: services[3].id,
            },
        }),
    ]);
    console.log('‚úÖ –°–≤—è–∑–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —É—Å–ª—É–≥ —Å–æ–∑–¥–∞–Ω—ã');
    const clients = await Promise.all([
        prisma.client.upsert({
            where: { id: 'client-elena' },
            update: {},
            create: {
                id: 'client-elena',
                businessId: business.id,
                name: '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
                phone: '+7 (495) 333-33-33',
                email: 'elena@example.com',
                notes: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä',
            },
        }),
        prisma.client.upsert({
            where: { id: 'client-olga' },
            update: {},
            create: {
                id: 'client-olga',
                businessId: business.id,
                name: '–û–ª—å–≥–∞ –ö–æ–∑–ª–æ–≤–∞',
                phone: '+7 (495) 444-44-44',
                email: 'olga@example.com',
                notes: '–õ—é–±–∏—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ü–≤–µ—Ç–∞–º–∏',
            },
        }),
    ]);
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', clients.length);
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(10, 0, 0, 0);
    const dayAfterTomorrow = new Date();
    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);
    dayAfterTomorrow.setHours(14, 0, 0, 0);
    const bookings = await Promise.all([
        prisma.booking.upsert({
            where: { id: 'booking-1' },
            update: {},
            create: {
                id: 'booking-1',
                businessId: business.id,
                serviceId: services[0].id,
                staffId: staff[0].id,
                clientId: clients[0].id,
                startTs: tomorrow,
                endTs: new Date(tomorrow.getTime() + 80 * 60000),
                status: 'CONFIRMED',
                source: 'WEB',
            },
        }),
        prisma.booking.upsert({
            where: { id: 'booking-2' },
            update: {},
            create: {
                id: 'booking-2',
                businessId: business.id,
                serviceId: services[2].id,
                staffId: staff[1].id,
                clientId: clients[1].id,
                startTs: dayAfterTomorrow,
                endTs: new Date(dayAfterTomorrow.getTime() + 55 * 60000),
                status: 'PENDING',
                source: 'VK',
            },
        }),
    ]);
    console.log('‚úÖ –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã:', bookings.length);
    const templates = await Promise.all([
        prisma.notificationTemplate.upsert({
            where: {
                businessId_type_channel: {
                    businessId: business.id,
                    type: 'CONFIRM',
                    channel: 'SMS',
                },
            },
            update: {},
            create: {
                businessId: business.id,
                type: 'CONFIRM',
                channel: 'SMS',
                subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏',
                message: '–ü—Ä–∏–≤–µ—Ç, {{clientName}}! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –≤ {{businessName}} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {{serviceName}} —Å {{staffName}} –Ω–∞ {{date}} –≤ {{time}}. –ñ–¥–µ–º –≤–∞—Å!',
                isActive: true,
            },
        }),
        prisma.notificationTemplate.upsert({
            where: {
                businessId_type_channel: {
                    businessId: business.id,
                    type: 'REMINDER',
                    channel: 'SMS',
                },
            },
            update: {},
            create: {
                businessId: business.id,
                type: 'REMINDER',
                channel: 'SMS',
                subject: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏',
                message: '–ü—Ä–∏–≤–µ—Ç, {{clientName}}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ –≤ {{businessName}}: {{serviceName}} —Å {{staffName}} –∑–∞–≤—Ç—Ä–∞ –≤ {{time}}. –î–æ –≤—Å—Ç—Ä–µ—á–∏!',
                isActive: true,
            },
        }),
    ]);
    console.log('‚úÖ –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã:', templates.length);
    console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
    console.log(`üè¢ –ë–∏–∑–Ω–µ—Å: ${business.name}`);
    console.log(`üíÖ –£—Å–ª—É–≥–∏: ${services.length}`);
    console.log(`üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: ${staff.length}`);
    console.log(`üë§ –ö–ª–∏–µ–Ω—Ç—ã: ${clients.length}`);
    console.log(`üìÖ –ó–∞–ø–∏—Å–∏: ${bookings.length}`);
    console.log(`üìù –®–∞–±–ª–æ–Ω—ã: ${templates.length}`);
    console.log('\nüîë –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log('Email: test@example.com');
    console.log('–ü–∞—Ä–æ–ª—å: password');
}
main()
    .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', e);
    process.exit(1);
})
    .finally(async () => {
    await prisma.$disconnect();
});
//# sourceMappingURL=seed.js.map