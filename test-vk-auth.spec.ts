import { test, expect } from '@playwright/test';

test.describe('VK Auth Test', () => {
  test('–ø—Ä–æ–≤–µ—Ä–∫–∞ VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async ({ page }) => {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    page.on('request', request => {
      if (request.url().includes('/auth/vk')) {
        console.log('üîµ VK Auth Request:', {
          url: request.url(),
          method: request.method(),
          postData: request.postData(),
        });
      }
    });

    page.on('response', response => {
      if (response.url().includes('/auth/vk')) {
        console.log('üü¢ VK Auth Response:', {
          status: response.status(),
          statusText: response.statusText(),
          url: response.url(),
        });
        response.text().then(text => {
          console.log('üìÑ Response body:', text);
        }).catch(() => {});
      }
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.log –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    page.on('console', msg => {
      const text = msg.text();
      if (text.includes('VK') || text.includes('auth') || text.includes('error') || text.includes('error')) {
        console.log('üì± Browser console:', msg.type(), text);
      }
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    page.on('pageerror', error => {
      console.error('‚ùå Page error:', error.message);
    });

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    await page.goto('http://localhost:5173/login');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.waitForLoadState('networkidle');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const vkButton = page.locator('button').filter({ hasText: /–≤–∫/i }).or(page.locator('button').filter({ hasText: /vk/i }));
    
    console.log('üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É VK...');
    const buttonText = await page.locator('button').allTextContents();
    console.log('üìã –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', buttonText);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    await page.screenshot({ path: 'screenshot-before-click.png' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ VK
    const vkButtonCount = await vkButton.count();
    console.log(`üîò –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ VK: ${vkButtonCount}`);
    
    if (vkButtonCount > 0) {
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ VK –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º...');
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É VK
      await vkButton.first().click();
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
      await page.waitForTimeout(2000);
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
      await page.screenshot({ path: 'screenshot-after-click.png' });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const errorMessages = await page.locator('[role="alert"], .error, [class*="error"]').allTextContents();
      if (errorMessages.length > 0) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', errorMessages);
      }
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
      await page.waitForTimeout(3000);
      
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ VK –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å HTML –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const html = await page.content();
      console.log('üìÑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):', html.substring(0, 2000));
    }
  });
});

