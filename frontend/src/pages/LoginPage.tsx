import { useState, useEffect, useCallback, memo } from 'react';
import { useSearchParams } from 'react-router-dom';
import {
  FormItem,
  Input,
  Button,
  Div,
  Text,
  Tabs,
  TabsItem,
  Alert,
} from '@vkontakte/vkui';
import { useAuth } from '../contexts/AuthContext';
import { useVkBridge } from '../hooks/useVkBridge';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∏–ª–µ–π
const LOGIN_STYLES = {
  container: {
    padding: '16px',
    minHeight: '100vh',
    display: 'flex',
    flexDirection: 'column' as const,
    justifyContent: 'center',
  },
  formContainer: {
    padding: '20px 0',
    maxWidth: '400px',
    margin: '0 auto',
    width: '100%',
  },
  formContainerMobile: {
    padding: '16px 0',
    maxWidth: '400px',
    margin: '0 auto',
    width: '100%',
  },
  title: {
    marginBottom: '20px',
    textAlign: 'center' as const,
    fontSize: '24px',
  },
  titleMobile: {
    marginBottom: '20px',
    textAlign: 'center' as const,
    fontSize: '20px',
  },
  subtitle: {
    marginBottom: '20px',
    textAlign: 'center' as const,
    color: '#6D7885',
    fontSize: '16px',
  },
  subtitleMobile: {
    marginBottom: '20px',
    textAlign: 'center' as const,
    color: '#6D7885',
    fontSize: '14px',
  },
  vkButton: {
    marginTop: '20px',
    textAlign: 'center' as const,
  },
} as const;

export const LoginPage = memo(() => {
  const { login, register, vkAuth, isAuthenticated, user } = useAuth();
  const { isReady, getAuthToken } = useVkBridge();
  const [searchParams, setSearchParams] = useSearchParams();
  const [activeTab, setActiveTab] = useState<'login' | 'register'>('login');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ VK callback)
  useEffect(() => {
    const urlError = searchParams.get('error');
    if (urlError) {
      setError(decodeURIComponent(urlError));
      setSearchParams({}, { replace: true }); // –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
    }
  }, [searchParams, setSearchParams]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const redirectToBusinesses = useCallback(() => {
    console.log('üéØ Redirecting to /businesses after successful auth');
    window.location.replace('/businesses');
  }, []);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (isAuthenticated && user) {
      redirectToBusinesses();
    }
  }, [isAuthenticated, user, redirectToBusinesses]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      if (activeTab === 'login') {
        await login(email, password);
      } else {
        await register(email, password);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      setTimeout(redirectToBusinesses, 100);
    } catch (err: any) {
      console.error('‚ùå Auth error:', err);
      setError(err.response?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  }, [activeTab, email, password, login, register, redirectToBusinesses]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleVkAuth = useCallback(async () => {
    setIsLoading(true);
    setError('');

    try {
      if (!isReady) {
        throw new Error('VK Bridge –Ω–µ –≥–æ—Ç–æ–≤');
      }

      const token = await getAuthToken();
      if (!token) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VK —Ç–æ–∫–µ–Ω');
      }
      
      await vkAuth(token);
      setTimeout(redirectToBusinesses, 100);
    } catch (err: any) {
      console.error('VK Auth error:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ VK');
    } finally {
      setIsLoading(false);
    }
  }, [isReady, getAuthToken, vkAuth, redirectToBusinesses]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ç–∞–±–∞
  const handleTabChange = useCallback((tab: 'login' | 'register') => {
    setActiveTab(tab);
    setError(''); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–±–∞
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–∫–∏
  const handleClearError = useCallback(() => {
    setError('');
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
  const isMobile = window.innerWidth < 768;

  return (
    <Div style={LOGIN_STYLES.container}>
      <Tabs>
        <TabsItem
          selected={activeTab === 'login'}
          onClick={() => handleTabChange('login')}
        >
          –í—Ö–æ–¥
        </TabsItem>
        <TabsItem
          selected={activeTab === 'register'}
          onClick={() => handleTabChange('register')}
        >
          –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        </TabsItem>
      </Tabs>

      <Div style={isMobile ? LOGIN_STYLES.formContainerMobile : LOGIN_STYLES.formContainer}>
        <Text weight="2" style={isMobile ? LOGIN_STYLES.titleMobile : LOGIN_STYLES.title}>
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mastro
        </Text>
        <Text style={isMobile ? LOGIN_STYLES.subtitleMobile : LOGIN_STYLES.subtitle}>
          –°–µ—Ä–≤–∏—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã—Ö –∏ —Å–∞–ª–æ–Ω–æ–≤
        </Text>

        {error && (
          <Alert
            onClose={handleClearError}
            actions={[
              {
                title: '–ü–æ–Ω—è—Ç–Ω–æ',
                mode: 'cancel',
                action: handleClearError,
              },
            ]}
          >
            {error}
          </Alert>
        )}

        <form onSubmit={handleSubmit}>
          <Div>
            <FormItem top="Email">
              <Input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                required
              />
            </FormItem>

            <FormItem top="–ü–∞—Ä–æ–ª—å">
              <Input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                required
              />
            </FormItem>

            <FormItem>
              <Button
                type="submit"
                size="l"
                stretched
                loading={isLoading}
                disabled={!email || !password}
              >
                {activeTab === 'login' ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
              </Button>
            </FormItem>
          </Div>
        </form>

        <Div style={LOGIN_STYLES.vkButton}>
          <Button
            size="l"
            stretched
            mode="secondary"
            onClick={handleVkAuth}
            loading={isLoading}
            disabled={!isReady}
          >
            –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ VK
          </Button>
        </Div>
      </Div>
    </Div>
  );
});
