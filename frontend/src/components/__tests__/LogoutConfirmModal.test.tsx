import { describe, it, expect, vi } from 'vitest'
import { screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { LogoutConfirmModal } from '../LogoutConfirmModal'
import { renderWithProviders } from '../../test/utils'

describe('LogoutConfirmModal', () => {
	it('–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ isOpen=false', () => {
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={false}
				onClose={() => {}}
				onConfirm={() => {}}
			/>,
		)
		expect(screen.queryByText('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞')).not.toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ isOpen=true', () => {
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={() => {}}
				onConfirm={() => {}}
			/>,
		)
		expect(screen.getByText('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞')).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫', () => {
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={() => {}}
				onConfirm={() => {}}
			/>,
		)
		expect(screen.getByText('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', () => {
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={() => {}}
				onConfirm={() => {}}
			/>,
		)
		expect(
			screen.getByText(
				'–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
			),
		).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∫–æ–Ω–∫—É', () => {
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={() => {}}
				onConfirm={() => {}}
			/>,
		)
		expect(screen.getByText('üö™')).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã', () => {
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={() => {}}
				onConfirm={() => {}}
			/>,
		)
		expect(screen.getByText('–û—Ç–º–µ–Ω–∞')).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞', () => {
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={() => {}}
				onConfirm={() => {}}
			/>,
		)
		expect(screen.getByText('–í—ã–π—Ç–∏')).toBeInTheDocument()
	})

	it('–≤—ã–∑—ã–≤–∞–µ—Ç onClose –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã', async () => {
		const handleClose = vi.fn()
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={handleClose}
				onConfirm={() => {}}
			/>,
		)

		const cancelButton = screen.getByText('–û—Ç–º–µ–Ω–∞')
		await userEvent.click(cancelButton)

		expect(handleClose).toHaveBeenCalledTimes(1)
	})

	it('–≤—ã–∑—ã–≤–∞–µ—Ç onConfirm –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞', async () => {
		const handleConfirm = vi.fn().mockResolvedValue(undefined)
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={() => {}}
				onConfirm={handleConfirm}
			/>,
		)

		const logoutButton = screen.getByText('–í—ã–π—Ç–∏')
		await userEvent.click(logoutButton)

		await vi.waitFor(() => {
			expect(handleConfirm).toHaveBeenCalledTimes(1)
		})
	})

	it('–±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞', async () => {
		const handleConfirm = vi.fn(() => new Promise((resolve) => setTimeout(resolve, 100)))
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={() => {}}
				onConfirm={handleConfirm}
			/>,
		)

		const logoutButton = screen.getByText('–í—ã–π—Ç–∏').closest('button')
		await userEvent.click(logoutButton!)

		// –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
		await vi.waitFor(() => {
			expect(logoutButton).toBeDisabled()
		})
	})

	it('—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞', async () => {
		const handleConfirm = vi.fn().mockResolvedValue(undefined)
		renderWithProviders(
			<LogoutConfirmModal
				isOpen={true}
				onClose={() => {}}
				onConfirm={handleConfirm}
			/>,
		)

		const logoutButton = screen.getByText('–í—ã–π—Ç–∏')
		await userEvent.click(logoutButton)

		await vi.waitFor(() => {
			expect(handleConfirm).toHaveBeenCalled()
		})

		// –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–Ω–æ–≤–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
		// (–∏–ª–∏ –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞, —á—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ onConfirm)
	})
})

