import { describe, it, expect, vi, beforeEach } from 'vitest'
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { ErrorBoundary, NotFoundPage } from '../ErrorBoundary'
import { renderWithProviders } from '../../test/utils'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ErrorBoundary
const ThrowError = ({ shouldThrow = true }: { shouldThrow?: boolean }) => {
	if (shouldThrow) {
		throw new Error('Test error')
	}
	return <div>–£—Å–ø–µ—à–Ω–æ</div>
}

describe('ErrorBoundary', () => {
	beforeEach(() => {
		// –ü–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤
		vi.spyOn(console, 'error').mockImplementation(() => {})
	})

	afterEach(() => {
		vi.restoreAllMocks()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç children –∫–æ–≥–¥–∞ –æ—à–∏–±–æ–∫ –Ω–µ—Ç', () => {
		renderWithProviders(
			<ErrorBoundary>
				<div>–ö–æ–Ω—Ç–µ–Ω—Ç</div>
			</ErrorBoundary>,
		)
		expect(screen.getByText('–ö–æ–Ω—Ç–µ–Ω—Ç')).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç fallback UI –ø—Ä–∏ –æ—à–∏–±–∫–µ', () => {
		renderWithProviders(
			<ErrorBoundary>
				<ThrowError />
			</ErrorBoundary>,
		)
		expect(screen.getByText('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî')).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π fallback –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–Ω', () => {
		renderWithProviders(
			<ErrorBoundary fallback={<div>–ö–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞</div>}>
				<ThrowError />
			</ErrorBoundary>,
		)
		expect(screen.getByText('–ö–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞')).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã', () => {
		renderWithProviders(
			<ErrorBoundary>
				<ThrowError />
			</ErrorBoundary>,
		)

		const reloadButton = screen.getByText('–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É')
		expect(reloadButton).toBeInTheDocument()
	})

	it('–≤—ã–∑—ã–≤–∞–µ—Ç window.location.reload –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', async () => {
		const reloadSpy = vi.fn()
		Object.defineProperty(window, 'location', {
			value: {
				reload: reloadSpy,
			},
			writable: true,
		})

		renderWithProviders(
			<ErrorBoundary>
				<ThrowError />
			</ErrorBoundary>,
		)

		const reloadButton = screen.getByText('–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É')
		await userEvent.click(reloadButton)

		expect(reloadSpy).toHaveBeenCalledTimes(1)
	})

	it('–ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å', () => {
		const consoleErrorSpy = vi.spyOn(console, 'error')

		renderWithProviders(
			<ErrorBoundary>
				<ThrowError />
			</ErrorBoundary>,
		)

		expect(consoleErrorSpy).toHaveBeenCalled()
	})
})

describe('NotFoundPage', () => {
	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫', () => {
		renderWithProviders(<NotFoundPage />)
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö)
		const headings = screen.getAllByText('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
		expect(headings.length).toBeGreaterThan(0)
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∫–æ–Ω–∫—É', () => {
		renderWithProviders(<NotFoundPage />)
		expect(screen.getByText('üîç')).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ', () => {
		renderWithProviders(<NotFoundPage />)
		expect(
			screen.getByText(
				'–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞.',
			),
		).toBeInTheDocument()
	})

	it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞', () => {
		renderWithProviders(<NotFoundPage />)
		expect(screen.getByText('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')).toBeInTheDocument()
	})

	it('–≤—ã–∑—ã–≤–∞–µ—Ç window.history.back –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', async () => {
		const backSpy = vi.fn()
		Object.defineProperty(window, 'history', {
			value: {
				back: backSpy,
			},
			writable: true,
		})

		renderWithProviders(<NotFoundPage />)

		const backButton = screen.getByText('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
		await userEvent.click(backButton)

		expect(backSpy).toHaveBeenCalledTimes(1)
	})
})

